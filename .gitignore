## PYTHON BEGIN ##

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

## PYTHON END ##

## POWERSHELL BEGIN ##

bin/
obj/
.ionide/
project.lock.json
*-tests.xml
/debug/
/staging/
/Packages/
*.nuget.props

# dotnet cli install/uninstall scripts
dotnet-install.ps1
dotnet-install.sh
dotnet-uninstall-pkgs.sh
dotnet-uninstall-debian-packages.sh

# VS auto-generated solution files for project.json solutions
*.xproj
*.xproj.user
*.suo

# VS auto-generated files for csproj files
*.csproj.user

# Visual Studio IDE directory
.vs/

# VSCode directories that are not at the repository root
/**/.vscode/

# Project Rider IDE files
.idea.powershell/

# Ignore executables
*.exe
*.msi
*.appx
*.msix

# Ignore binaries and symbols
*.pdb
*.dll
*.wixpdb

# Ignore packages
*.deb
*.tar.gz
*.zip
*.rpm
*.pkg
*.nupkg
*.AppImage

# default location for produced nuget packages
/nuget-artifacts

# resgen output
gen

# Per repo profile
.profile.ps1

# macOS
.DS_Store
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk
.AppleDouble
.LSOverride

# TestsResults
TestsResults*.xml
ParallelXUnitResults.xml
xUnitResults.xml

# Resharper settings
PowerShell.sln.DotSettings.user
*.msp
StyleCop.Cache

# Ignore SelfSignedCertificate autogenerated files
test/tools/Modules/SelfSignedCertificate/

# BenchmarkDotNet artifacts
test/perf/BenchmarkDotNet.Artifacts/

## POWERSHELL END ##
